apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        versionCode androidGitVersion.code()
        versionName androidGitVersion.name()

        testInstrumentationRunner rootProject.ext.testInstrumentationRunner

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation": "$projectDir/schemas".toString(),
                        "room.incremental"   : "true"
                ]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':domain')

    // ========== Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.kotlinCoroutines"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.kotlinCoroutines"

    implementation "androidx.core:core-ktx:$versions.androidx.core_ktx"

    implementation "androidx.arch.core:core-common:$versions.androidx.arch"
    implementation "androidx.arch.core:core-runtime:$versions.androidx.arch"
    testImplementation "androidx.arch.core:core-testing:$versions.androidx.arch"
    androidTestImplementation "androidx.arch.core:core-testing:$versions.androidx.arch"

    implementation "com.jakewharton.timber:timber:$versions.timber"

    // ========== Room
    api "androidx.room:room-runtime:$versions.androidx.room"
    implementation "androidx.room:room-ktx:$versions.androidx.room"
    kapt "androidx.room:room-compiler:$versions.androidx.room"

    // ========== Dagger
    implementation "com.google.dagger:dagger:$versions.dagger"
    implementation "com.google.dagger:dagger-android:$versions.dagger"
    implementation "com.google.dagger:dagger-android-support:$versions.dagger"
    kapt "com.google.dagger:dagger-android-processor:$versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"

    // ========== LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:$versions.androidx.lifecycle"

    // Location services
    implementation "com.google.android.gms:play-services-location:$versions.playServices.location"

    // ========== Network - Retrofit + OkHttp
    api "com.squareup.okhttp3:okhttp:$versions.okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttp"
    api "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:converter-moshi:$versions.retrofit"
    implementation "com.squareup.moshi:moshi-kotlin:$versions.moshi_kotlin"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$versions.moshi_kotlin"
    testImplementation "com.squareup.okhttp3:mockwebserver:$versions.okhttp"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$versions.okhttp"

    // Testing
    testImplementation "junit:junit:$versions.junit"
    testImplementation "androidx.test:runner:$versions.androidx.test.runner"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "org.mockito:mockito-core:$versions.mockito"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$versions.mockito_kotlin"

    // Testing
    testImplementation "org.mockito:mockito-core:$versions.mockito"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$versions.mockito_kotlin"

    // Testing - Dagger
    testImplementation "com.google.dagger:dagger:$versions.dagger"
    kaptTest "com.google.dagger:dagger-compiler:$versions.dagger"
    kaptTest "com.google.dagger:dagger-android-processor:$versions.dagger"

    // Android Testing - Instrumentation
    androidTestImplementation "androidx.test:runner:$versions.androidx.test.runner"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    androidTestImplementation "org.mockito:mockito-core:$versions.mockito"
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$versions.mockito_kotlin"

    // Core library
    androidTestImplementation "androidx.test:core:$versions.androidx.test.core"

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation "androidx.test:runner:$versions.androidx.test.runner"
    testImplementation "androidx.test:runner:$versions.androidx.test.runner"
    androidTestImplementation "androidx.test:rules:$versions.androidx.test.rules"

    // Assertions
    androidTestImplementation "androidx.test.ext:junit:$versions.androidx.test.junit"
    androidTestImplementation "androidx.test.ext:truth:$versions.androidx.test.androidx_truth"
    androidTestImplementation "com.google.truth:truth:$versions.androidx.test.google_truth"

    // Android Testing - Dagger
    androidTestImplementation "com.google.dagger:dagger:$versions.dagger"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$versions.dagger"
    kaptAndroidTest "com.google.dagger:dagger-android-processor:$versions.dagger"
}
